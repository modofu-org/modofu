#!/bin/bash

####################################
# Copyright (c) 2016 - 2017 YMC AG #
###########################################################################
# This program is free software; you can redistribute it and/or modify it #
# under the terms of the GNU General Public License as published by the   #
# Free Software Foundation; either version 2 of the License, or (at your  #
# option) any later version.                                              #
# A copy of the GNU General Public License version 2 is in file GPL-2.    #
###########################################################################

set -e

export MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION="0.2017.08.02-1"
MODOFU_SCRIPT_NAME="$(basename "$0" || echo "$0")"

if [ -z "$MODOFU_DOCKER_IMAGE" ]; then
  echo "E: Environment variable '\$MODOFU_DOCKER_IMAGE' not defined" 1>&2
  exit 1
fi

GENERIC_LOCAL_TEST_IP="127.254.253.251"
LOCAL_DOCKER_HOST_IP="203.0.113.177"
MODOFU_LOCAL_DOCUMENTATION_IP="127.254.253.252"
MODOFU_DEFAULT_DEV_IP_RANGE="127.177.0.0/16"

OS="$(uname)"
case "$OS" in
  Darwin)
    OS="osx"
    NC="nc -G 1"
    SED="sed -E"
  ;;

  Linux)
    OS="linux"
    NC="nc"
    SED="sed -r"
  ;;

  *)
    echo "E: Unsupported operating '$OS' system" 1>&2
    exit 1
  ;;
esac


if ! [ -x "$(which docker)" ]; then
  echo "E: docker not found. Please install it manually!" 1>&2
  exit 1
fi

if docker compose version 1>/dev/null 2>/dev/null; then
  HAS_COMPOSE_V2_SUPPORT="yes"
  DOCKER_COMPOSER_CMD="docker compose"
else
  HAS_COMPOSE_V2_SUPPORT="no"
  DOCKER_COMPOSER_CMD="docker-compose"
  if ! [ -x "$(which $DOCKER_COMPOSER_CMD)" ]; then
    echo "E: $DOCKER_COMPOSER_CMD not found. Please install it manually or consider installing a newer version of docker with compose )v2= already built in!" 1>&2
    exit 1
  fi
fi

if ! [ -x "$(which nc)" ]; then
  echo "E: Command 'nc' (netcat) not found. Please install netcat manually!" 1>&2
  exit 1
fi

NEED_DOCKER_SYNC=0
if [ "$OS" = "osx" ] && \
   [ -f "./docker-sync.yml" ]; then
  NEED_DOCKER_SYNC=1
fi

provide_basic_informations()
{
  if [ ! -f .env ]; then
    echo "E: No '.env' file found in the current directory." 1>&2
    echo "   Are you in the project's root directory?" 1>&2
    exit 1
  fi

  if [ ! -r .env ]; then
    echo "E: The '.env' file is not readable." 1>&2
    exit 1
  fi

  source .env

  if [ -r .modofu-env ]; then
    source .modofu-env
  else
    echo "I: No '.modofu-env' override found - skipping" 1>&2
  fi

  if [ -r .modofu-env.local ]; then
    source .modofu-env.local
  else
    echo "I: No '.modofu-env.local' override found - skipping" 1>&2
  fi

  if [ -z "$COMPOSE_PROJECT_NAME" ]; then
    echo "E: You need to define variable 'COMPOSE_PROJECT_NAME' in the projects '.env' file, containing the" 1>&2
    echo "   name of the project." 1>&2
    exit 1
  else
    local COMPOSE_PROJECT_NAME_UNWASHED="$COMPOSE_PROJECT_NAME"
    # "Normalize" the name, just like docker-compose does it - see:
    #  https://github.com/docker/compose/blob/1.14.0/compose/cli/command.py#L108
    export COMPOSE_PROJECT_NAME=$(echo "$COMPOSE_PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | $SED 's/[^a-z0-9]//g')

    if [ "$COMPOSE_PROJECT_NAME_UNWASHED" != "$COMPOSE_PROJECT_NAME" ]; then
      echo "E: The project name, defined in file .env using variable 'COMPOSE_PROJECT_NAME' is not valid." 1>&2
      echo "   Please make sure it is all lowercase and uses only a-z and 0-9." 1>&2
      echo "   This is a limitation of docker-compose, for details refer to e.g.:" 1>&2
      echo "   https://github.com/docker/compose/issues/2119" 1>&2
      echo "   https://github.com/docker/compose/issues/4002" 1>&2
      echo "I: Currently defined in .env: 'COMPOSE_PROJECT_NAME=\"${COMPOSE_PROJECT_NAME_UNWASHED}\"" 1>&2
      echo "   It should be changed to:   'COMPOSE_PROJECT_NAME=\"${COMPOSE_PROJECT_NAME}\"" 1>&2
      exit 1
    fi
  fi

  if [ -n "$PROJECT_DEV_DOMAINS" ]; then
    # Wash quotes out of PROJECT_DEV_DOMAINS #SEE e.g.: https://github.com/docker/compose/issues/3702
    export PROJECT_DEV_DOMAINS="$PROJECT_DEV_DOMAINS"
  fi

  if [ -n "$MODOFU_DEV_IP_RANGE" ]; then
    # Wash quotes out of PROJECT_DEV_IP #SEE e.g.: https://github.com/docker/compose/issues/3702
    export MODOFU_DEV_IP_RANGE="$MODOFU_DEV_IP_RANGE"
  else
    export MODOFU_DEV_IP_RANGE=$MODOFU_DEFAULT_DEV_IP_RANGE
  fi
  TEMP_MODOFU_IPCALC_OUTPUT="$(modofu_cmd_ipcalc --nocolor --nobinary $MODOFU_DEV_IP_RANGE)"
  if [ "$(echo "$TEMP_MODOFU_IPCALC_OUTPUT" | grep Network | cut -s -d ':' -f 2 | sed -E 's/[[:space:]]+//g')" != "$MODOFU_DEV_IP_RANGE" ]; then
    echo "E: The network '$MODOFU_DEV_IP_RANGE' provided via environment variable '\$MODOFU_DEV_IP_RANGE' is invalid"
    exit 1
  fi

  export MODOFU_DEV_IP_RANGE_HOST_MIN=$(echo "$TEMP_MODOFU_IPCALC_OUTPUT" | grep HostMin | cut -s -d ':' -f 2 | sed -E 's/[[:space:]]+//g')
  export MODOFU_DEV_IP_RANGE_HOST_MAX=$(echo "$TEMP_MODOFU_IPCALC_OUTPUT" | grep HostMax | cut -s -d ':' -f 2 | sed -E 's/[[:space:]]+//g')
  unset TEMP_MODOFU_IPCALC_OUTPUT

  if [ -n "$PROJECT_DEV_IP" ]; then
    # Wash quotes out of PROJECT_DEV_IP #SEE e.g.: https://github.com/docker/compose/issues/3702
    export PROJECT_DEV_IP="$PROJECT_DEV_IP"
  else
    # Get the local IP we will run on
    if [ "$OS" = "osx" ]; then
      docker run --rm $MODOFU_DOCKER_IMAGE /bin/bash -c 'cat $(which modofu-get-local-ip-for-project-name)' > /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-get-local-ip-for-project-name.script
      chmod 755 /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-get-local-ip-for-project-name.script
      export PROJECT_DEV_IP=$(/tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-get-local-ip-for-project-name.script "$COMPOSE_PROJECT_NAME")
    elif [ "$OS" = "linux" ]; then
      export PROJECT_DEV_IP=$(docker run --rm --env MODOFU_DEV_IP_RANGE_HOST_MIN=$MODOFU_DEV_IP_RANGE_HOST_MIN --env MODOFU_DEV_IP_RANGE_HOST_MAX=$MODOFU_DEV_IP_RANGE_HOST_MAX -v /etc/hosts:/etc_host_file.from_docker_host:ro $MODOFU_DOCKER_IMAGE modofu-get-local-ip-for-project-name "$COMPOSE_PROJECT_NAME")
    else
      echo "E: Can not get local IP to run on, since OS '$OS' is not supported" 1>&2
      return 1
    fi
  fi

  if [ -n "$COMPOSE_PATH_SEPARATOR" ]; then
    # Wash quotes out of COMPOSE_PATH_SEPARATOR #SEE e.g.: https://github.com/docker/compose/issues/3702
    export COMPOSE_PATH_SEPARATOR="$COMPOSE_PATH_SEPARATOR"
  else
    export COMPOSE_PATH_SEPARATOR=':'
  fi

  if [ -n "$COMPOSE_FILE" ]; then
    # Wash quotes out of COMPOSE_FILE #SEE e.g.: https://github.com/docker/compose/issues/3702
    export COMPOSE_FILE="$COMPOSE_FILE"
  else
    export COMPOSE_FILE="docker-compose.yml${COMPOSE_PATH_SEPARATOR}docker-compose-dev.yml"
  fi

  if [ -f "docker-compose-dev-${OS}.yml" ]; then
    echo "I: Taking OS specific docker-compose file 'docker-compose-dev-${OS}.yml' into account..." 1>&2
    export COMPOSE_FILE="${COMPOSE_FILE}${COMPOSE_PATH_SEPARATOR}docker-compose-dev-${OS}.yml"
  fi
}

int_add_entries_to_etc_hosts()
{
  local MATCH_NAME="$1"
  local IP_TO_ADD="$2"
  local EXTRA_DOMAINS_TO_ADD="$3"
  if [ "$OS" = "osx" ]; then
    docker run --rm $MODOFU_DOCKER_IMAGE /bin/bash -c 'cat $(which modofu-modify-etc-hosts)' > /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-modify-etc-hosts.script
    chmod 755 /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-modify-etc-hosts.script
    sudo /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-modify-etc-hosts.script $MATCH_NAME $IP_TO_ADD "$EXTRA_DOMAINS_TO_ADD"
  elif [ "$OS" = "linux" ]; then
    docker run --rm -v /etc/hosts:/etc_host_file.from_docker_host $MODOFU_DOCKER_IMAGE modofu-modify-etc-hosts $MATCH_NAME $IP_TO_ADD "$EXTRA_DOMAINS_TO_ADD"
  else
    echo "E: Can not modify /etc/hosts, since OS '$OS' is not supported" 1>&2
    return 1
  fi
}

get_docker_container_name_by_container_id()
{
  local container_id="$1"
  docker inspect $container_id | docker run --rm -i modofu/modofu:stable bash -c "cat - | jq .[0].Name | $SED 's|\"/?(.*)\"$|\1|'"
}

get_docker_compose_service_name_by_container_id()
{
  local container_id="$1"
  docker inspect $container_id | docker run --rm -i modofu/modofu:stable bash -c "cat - | jq '.[0].Config.Labels.\"com.docker.compose.service\"' | sed -r 's|\"/?(.*)\"$|\1|'"
}

provide_domain_informations()
{
  local_domain_names=$(grep "^$PROJECT_DEV_IP.*${COMPOSE_PROJECT_NAME}\$" /etc/hosts | $SED 's/[[:space:]]+/ /g' | $SED 's/#.*$//' | cut -d ' ' -f 2-)
  export MODOFU_PRIMARY_LOCAL_DOMAIN=$(echo $local_domain_names | cut -d ' ' -f 1)
}

provide_ports_informations()
{
  ports_used_by_project=$(PROJECT_DEV_IP=$GENERIC_LOCAL_TEST_IP $DOCKER_COMPOSER_CMD config | docker run --rm -i modofu/modofu:stable modofu-get-ports-from-docker-compose-config)
}

open_service_url() {
  if [ "$HAS_COMPOSE_V2_SUPPORT" != "yes" ]; then
    echo "E: $MODOFU_SCRIPT_NAME dev url requires at least docker compose v2" 1>&2
    exit 1
  fi
  provide_basic_informations
  provide_domain_informations

  local docker_compose_config_json=$($DOCKER_COMPOSER_CMD config --format json)

  if [ "$#" -eq 0 ]; then
    echo "Usage: # $MODOFU_SCRIPT_NAME dev url [SERVICE...]"
    echo "Without specifying SERVICE, this command lists all available services and their ports/urls."
    echo ""
    echo "Available services:"

    echo "$docker_compose_config_json" | docker run --rm -i modofu/modofu:stable /bin/bash -c \
"jq -r '.services | to_entries[] | .key as \$service | .value.ports[]? | \"\(\$service) | \(.published):\(.target) (public:private) | URL: http://$MODOFU_PRIMARY_LOCAL_DOMAIN:\(.published)\"'"

    return 0
  fi

  local service_name="$1"

  local port_mapping=$(echo "$docker_compose_config_json" | docker run --rm -i modofu/modofu:stable /bin/bash -c \
  "jq -r --arg service_name \"$service_name\" '.services[\$service_name].ports[]?.published' | head -n 1")

  if [ -z "$port_mapping" ]; then
    echo "E: Could not find an exposed port for $service_name." 1>&2
    return 1
  fi

  local url="http://$MODOFU_PRIMARY_LOCAL_DOMAIN:$port_mapping"
  echo "Opening $url in your default browser..."

  if [ "$OS" = "osx" ]; then
    open "$url"
  elif [ "$OS" = "linux" ]; then
    xdg-open "$url"
  else
    echo "E: Unsupported operating system '$OS'" 1>&2
    return 1
  fi
}

modofu_cmd_ipcalc()
{
  docker run --rm $MODOFU_DOCKER_IMAGE ipcalc "$@"
}

start_devel_env()
{
  local run_setup_scripts="$1"
  local run_start_scripts="$2"

  echo "I: Starting development environment..." 1>&2

  # Check if the modofu-cache volume is present
  if [ $(docker volume inspect modofu-cache 2>/dev/null | grep -c -F ': "modofu-cache"') -le 0 ]; then
    # Add the modofu name cache volume
    echo "I: Adding named docker volume 'modofu-cache'" 1>&2
    docker volume create --driver local modofu-cache
  fi

  if [ "$OS" = "osx" ]; then
    ### Older versions of modofu used to run docker-sync in a screen - check if such a screen is around and terminate it
    if [ -x "$(which screen)" ] && \
       [ $(screen -v | grep -c -i GNU) -eq 1 ]; then
      screen -S docker-sync-watchdog.$COMPOSE_PROJECT_NAME -X stuff $"^c\n" 1>/dev/null 2>/dev/null && sleep 10 || true
      screen -S docker-sync-watchdog.$COMPOSE_PROJECT_NAME -X quit 1>/dev/null 2>/dev/null || true
    fi

    # Bring up the GENERIC_LOCAL_TEST_IP
    echo "I: Adding a generic local test ip on the loopback device. You might need to provide your password..." 1>&2
    sudo ifconfig lo0 alias $GENERIC_LOCAL_TEST_IP 255.0.0.0

    # Bring up a static ip where we can be sure to always reach the local docker host
    echo "I: Adding a local ip on the loopback device, where the docker host can be reach from the docker containers..." 1>&2
    sudo ifconfig lo0 alias $LOCAL_DOCKER_HOST_IP 255.0.0.0
  elif [ "$OS" = "linux" ]; then
    # Bring up a static ip where we can be sure to always reach the local docker host
    if [ $(docker network inspect modofu-local-docker-host 2>/dev/null | grep -c -F "$LOCAL_DOCKER_HOST_IP") -le 0 ]; then
      # Ensure the docker network 'modofu-local-docker-host' does not exists
      docker network rm modofu-local-docker-host 2>/dev/null 1>/dev/null || true
      echo "I: Adding a local ip where the docker host can be reached from the docker containers..." 1>&2
      docker network create --driver bridge --ip-range 203.0.113.176/30 --subnet 203.0.113.176/30 --gateway $LOCAL_DOCKER_HOST_IP --internal modofu-local-docker-host
    fi
  fi

  # Add a name to reach the local docker host
  int_add_entries_to_etc_hosts "MODOFU-LOCAL-DOCKER-HOST" $LOCAL_DOCKER_HOST_IP "docker-host.local.modofu.test"

  provide_basic_informations

  # Print out which ip we use
  echo "I: Will use '$PROJECT_DEV_IP' for project with name '$COMPOSE_PROJECT_NAME'" 1>&2

  if [ "$OS" = "osx" ]; then
    echo "I: Adding local project IP on the loopback device. You might need to provide your password..." 1>&2
    sudo ifconfig lo0 alias $PROJECT_DEV_IP 255.0.0.0
  fi

  int_add_entries_to_etc_hosts $COMPOSE_PROJECT_NAME $PROJECT_DEV_IP "$PROJECT_DEV_DOMAINS"

  if [ "$OS" = "osx" ] && \
     [ $NEED_DOCKER_SYNC -eq 1 ]; then
    echo "I: This projects makes use of docker-sync" 1>&2
    if ! [ -x "$(which docker-sync)" ]; then
      echo "W: Command docker-sync not found." 1>&2
      echo "E: Please install it manually. Install instruction can be found at: http://docker-sync.io/" 1>&2
      exit 1
    else
      local docker_sync_working=1
      docker-sync -v 1>/dev/null 2>&1 || docker_sync_working=0
      if [ $docker_sync_working -ne 1 ]; then
        echo "E: Your docker-sync installation is broken. Please ensure you can successfully run at least '# docker-sync -v'" 1>&2
        exit 1
      fi
    fi

    if [ $(docker-sync list --verbose | grep sync_strategy | $SED 's/[^[:space:]]+[[:space:]]+(.*)/\1/' | grep -c -E -e '^unison$') -eq 1 ]; then
      if ! [ -x "$(which unison)" ]; then
        echo "E: Your docker-sync uses unison, but required tools on your mac are missing." 1>&2
        echo "   Please visit http://docker-sync.io/ to get instruction how to setup your" 1>&2
        echo "   mac for docker-sync with unison." 1>&2
        exit 1
      fi

      docker_sync_max_inotify_watches=$(cat docker-sync.yml | grep '^[^#]*max_inotify_watches' | sed -E 's/[^0-9]//g')
      if [ -n "$docker_sync_max_inotify_watches" ]; then
        echo "I: 'max_inotify_watches: $docker_sync_max_inotify_watches' configured in docker-sync.yml" 1>&2
        echo "   Checking and trying to increase the according kernel parameters, since docker-sync might not be able to do this in background mode..." 1>&2

        docker_sync_current_max_files_per_proc=$(sysctl kern.maxfilesperproc | sed -E 's/[^0-9]//g')
        if [ -n "$docker_sync_current_max_files_per_proc" ] && \
           [ $docker_sync_current_max_files_per_proc -lt $docker_sync_max_inotify_watches ]; then
          echo "I: Need to increase kern.maxfilesperproc from $docker_sync_current_max_files_per_proc to $docker_sync_max_inotify_watches - you might need to provide your password..." 1>&2
          sudo sysctl -w kern.maxfilesperproc="$docker_sync_max_inotify_watches"
        fi

        docker_sync_current_max_files=$(sysctl kern.maxfiles | sed -E 's/[^0-9]//g')
        if [ -n "$docker_sync_current_max_files" ] && \
           [ $docker_sync_current_max_files -lt $docker_sync_max_inotify_watches ]; then
          echo "I: Need to increase kern.maxfiles from $docker_sync_current_max_files to $docker_sync_max_inotify_watches - you might need to provide your password..." 1>&2
          sudo sysctl -w kern.maxfiles="$docker_sync_max_inotify_watches"
        fi
      fi
    fi

    if [ ! -d "/tmp/modofu/docker-sync" ]; then
      mkdir -p /tmp/modofu/docker-sync
    fi

    echo "I: Stopping possibly running docker-sync..." 1>&2
    docker-sync stop --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME 2>/dev/null || true

    echo "I: Starting docker-sync. This can take a long time (even with no output)," 1>&2
    echo "   especially if a lot of files have to be synced from the mac towards docker." 1>&2
    sleep 2
    docker-sync start --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME
  fi

  provide_domain_informations

  provide_ports_informations

  echo "I: Checking if something blocking ports needed by the project on the local." 1>&2
  for port in $ports_used_by_project
  do
    is_blocking=0
    echo "I: Checking port $port..." 1>&2
    $NC -z $GENERIC_LOCAL_TEST_IP $port && is_blocking=1 || is_blocking=0
    if [ $is_blocking -eq 1 ]; then
      echo "E: Something is already using port $port on your local system." 1>&2
      echo "   Reconfigure the service blocking this ports to use 127.0.0.1 instead"  1>&2
      echo "   of listening on all IPs or simply stop the service." 1>&2
      echo "I: To find out what process is listening on port $port use:" 1>&2
      echo "   # sudo lsof -i :$port" 1>&2
      exit 1
    fi
  done

  $DOCKER_COMPOSER_CMD up --no-build -d

  echo "I: App is now starting, this could take a moment. Use command" 1>&2
  echo "     # $MODOFU_SCRIPT_NAME dev logs -f" 1>&2
  echo "   to view the progress." 1>&2

  # Get running containers
  container_ids=$($DOCKER_COMPOSER_CMD ps -q)

  # Process each each container
  for container_id in $container_ids
  do
    if [ $(docker exec -u 0 $container_id cat /etc/hosts | grep -c -F "$LOCAL_DOCKER_HOST_IP docker-host.local.modofu.test") -le 0 ]; then
      docker exec -u 0 $container_id sh -c "echo '$LOCAL_DOCKER_HOST_IP docker-host.local.modofu.test' >> /etc/hosts" || true
    fi
  done

  if [ "$run_setup_scripts" == "true" ]; then
    run_in_container_d_scripts "setup"
  fi

  if [ "$run_start_scripts" == "true" ]; then
    run_in_container_d_scripts "start"
  fi

}

run_in_container_d_scripts()
{
  # Run XYZ.d-scripts in each container
  local WHAT_TO_RUN_NAME="$1"
  local WHAT_TO_RUN_D="$WHAT_TO_RUN_NAME.d"
  echo "" 1>&2
  echo "I: Running '/modofu/$WHAT_TO_RUN_D/*' within each container..." 1>&2
  echo "" 1>&2
  docker run --rm $MODOFU_DOCKER_IMAGE /bin/bash -c 'cat $(which modofu-run-script-d-in-container)' > /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-run-script-d-in-container.script

  if [ -d "./modofu/containers" ] && \
     [ -d "./modofu/services" ]; then
    echo "E: Please either use './modofu/services' or './modofu/containers'. The later is deprecated and should no longer be used." 1>&2
    exit 1
  fi

  local script_subdir_to_use="services"
  if [ -d "./modofu/containers" ]; then
    script_subdir_to_use="containers"
    local tmp_deprecation_timestamp=1711359745
    local tmp_days_deprecated=$(( ($(date +%s) - $tmp_deprecation_timestamp) / 86400 ))
    if date -d @0 1>/dev/null 2>/dev/null; then
      local tmp_deprecation_date=$(date -d @$tmp_deprecation_timestamp)
    else
      local tmp_deprecation_date=$(date -jf "%s" $tmp_deprecation_timestamp)
    fi
    echo "W: Per container-scripts have been deprecated in favor of per service-scripts. Please rename './modofu/containers' to './modofu/services' as soon as possible." 1>&2
    echo "   This deprecation happened on $tmp_deprecation_date, which was ${tmp_days_deprecated} days ago" 1>&2
    echo "   I will now sleep for ${tmp_days_deprecated} seconds, you might want to use this time to rename './modofu/containers' to './modofu/services'..." 1>&2
    sleep $tmp_days_deprecated
    unset tmp_deprecation_timestamp
    unset tmp_days_deprecated
  fi

  for container_id in $container_ids
  do
    service_name="$(get_docker_compose_service_name_by_container_id $container_id)"
    if [ ! -d "./modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D" ]; then
      echo "I: Skipping service '$service_name' for container with id '$container_id', since" 1>&2
      echo "    './modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D/'" 1>&2
      echo "    is not present in the project" 1>&2
      echo "" 1>&2
      continue
    fi

    container_name="$(get_docker_container_name_by_container_id $container_id)"

    echo "I: Processing container '$container_name' with id '$container_id'" 1>&2
    # Test if we have sh in the container
    docker exec -i -u 0 $container_id /usr/bin/env sh -c "exit 0" && sh_present_in_container=1 || sh_present_in_container=0
    if [ $sh_present_in_container -ne 1 ]; then
      echo "I: No 'sh' is present in container '$container_name'." 1>&2
      echo "   Will not try to run '/modofu/$WHAT_TO_RUN_D/*' within this container." 1>&2
      continue
    fi

    echo "I: Running '/modofu/$WHAT_TO_RUN_D/*' in container '$container_name'..." 1>&2
    if [ -d "./modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D" ]; then
      echo "I: Copying contents in './modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D'" 1>&2
      echo "   to '$container_name:/modofu/$WHAT_TO_RUN_D/'" 1>&2
      docker exec $container_id mkdir /modofu 2>/dev/null || true
      docker cp ./modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D $container_id:/modofu/
    else
      echo "I: Directory './modofu/$script_subdir_to_use/$service_name/$WHAT_TO_RUN_D' does not exists," 1>&2
      echo "   NOT copying anything to '$container_name:/modofu/$WHAT_TO_RUN_D/'" 1>&2
    fi

    docker cp /tmp/modofu-$MODOFU_LOCAL_DOCKER_SETUP_REAL_VERSION-run-script-d-in-container.script $container_id:/tmp/modofu-run-script-d-in-container
    docker exec -u 0 $container_id chmod 0777 /tmp/modofu-run-script-d-in-container
    docker exec -it -u 0 $container_id /tmp/modofu-run-script-d-in-container $WHAT_TO_RUN_NAME
    docker exec -u 0 $container_id rm -f /tmp/modofu-run-script-d-in-container
    echo "I: Finished running '/modofu/$WHAT_TO_RUN_D/*' in container '$container_name'..." 1>&2
    echo "" 1>&2
  done
}

devel_env_info()
{
  provide_basic_informations
  provide_domain_informations
  provide_ports_informations
  echo "__________________________________________________________________________" 1>&2
  echo "" 1>&2
  echo "I: Your project uses the IP '$PROJECT_DEV_IP'" 1>&2
  if [ -n "$ports_used_by_project" ]; then
    echo "   and listens on port(s): $(echo $ports_used_by_project)" 1>&2
  else
    echo "   but does not listen on any ports on it !?!" 1>&2
  fi
  if [ -z "$local_domain_names" ]; then
    echo "   Currently no names are pointing to the above mentioned IP." 1>&2
  else
    echo "   The following names are currently pointing to the above mentioned IP:" 1>&2
    for local_domain_name in $local_domain_names; do
      echo "   - $local_domain_name" 1>&2
    done
  fi

  echo "" 1>&2
  echo "I: Use '# $MODOFU_SCRIPT_NAME dev ps'   to get details about services" 1>&2
  echo "I: Use '# $MODOFU_SCRIPT_NAME dev logs [SERVICES...]' to see the logs of one or more services" 1>&2
  echo "I: Use '# $MODOFU_SCRIPT_NAME dev url' to get a list of services and their urls" 1>&2
  echo "I: Use '# $MODOFU_SCRIPT_NAME dev stop' to stop the app" 1>&2
  echo "I: Use '# $MODOFU_SCRIPT_NAME dev info' to see this this summary again" 1>&2

  if [ $NEED_DOCKER_SYNC -eq 1 ]; then
    echo "" 1>&2
    echo "I: If you are interested in the output of docker-sync, use:" 1>&2
    echo "   # $MODOFU_SCRIPT_NAME sync log" 1>&2
  fi

}

pull_devel_env()
{
  echo "I: Pulling fresh images for development environment..." 1>&2
  provide_basic_informations

  $DOCKER_COMPOSER_CMD pull --ignore-pull-failures "$@"
}


build_devel_env()
{
  echo "I: (Re-)Building development environment..." 1>&2
  provide_basic_informations

  $DOCKER_COMPOSER_CMD build "$@"
}

stop_devel_env()
{
  echo "I: Stopping development environment..." 1>&2
  provide_basic_informations
  provide_domain_informations

  if [ $NEED_DOCKER_SYNC -eq 1 ]; then
    docker-sync stop --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME || true
  fi

  $DOCKER_COMPOSER_CMD stop
}

clean_devel_sync()
{
  if [ "$OS" = "linux" ]; then
    echo "I: A sync workaround is not needed under linux, thus there is nothing to clean." 1>&2
  elif [ $NEED_DOCKER_SYNC -eq 0 ]; then
    echo "I: docker-sync is not in use in this project, thus there is nothing to clean." 1>&2
  elif [ "$OS" = "osx" ]; then
    stop_devel_env
    echo "I: Cleaning docker-sync..." 1>&2
    docker-sync clean
  else
    echo "E: Unsupported operating system." 1>&2
    exit 1
  fi
}

self_upgrade()
{
  echo "I: Upgrading modofu..." 1>&2
  docker pull $MODOFU_DOCKER_IMAGE
}

case "$1" in
  dev)
    case "$2" in
      info)
        devel_env_info
      ;;

      ps)
        provide_basic_informations
        $DOCKER_COMPOSER_CMD ps
      ;;

      url)
        open_service_url "${@:3}"
      ;;

      pull)
        shift 2
        pull_devel_env "$@"
      ;;

      build)
        int_dev_build_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev build [options] [SERVICES...]" 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    --force-rm        Always remove intermediate containers." 1>&2
          echo "    --no-cache        Do not use cache when building the image." 1>&2
          echo "    --no-pull         Do not refresh intermediate images." 1>&2
          echo "    --parallel        Build images in parallel." 1>&2
          echo "    --progress-plain  Show progress as plain text." 1>&2
        }
        force_rm_option=""
        no_cache_option=""
        pull_option="--pull"
        parallel_option=""
        shift 2
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_build_help
              exit 0
            ;;

            --force-rm)
              force_rm_option="--force-rm"
            ;;

            --no-cache)
              no_cache_option="--no-cache"
            ;;

            --no-pull)
              pull_option=""
            ;;

            --parallel)
              parallel_option="--parallel"
            ;;

            --progress-plain)
              if [ "$HAS_COMPOSE_V2_SUPPORT" != "yes" ]; then
                echo "E: Using the --progress-plain option requires at least docker compose v2" 1>&2
                exit 1
              fi

              export BUILDKIT_PROGRESS=plain
            ;;

            --)
              shift
              break
            ;;

            -?*)
              echo "Command 'dev' with argument 'build' does not support option '$1'" >&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        build_devel_env $force_rm_option $no_cache_option $pull_option $parallel_option "$@"
      ;;

      setup)
        int_dev_setup_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev setup [options]" 1>&2
          echo ""
          echo "This command sets up the development environment, ensuring all required" 1>&2
          echo "services and settings are initialized. It's typically run once before" 1>&2
          echo "starting the development environment for the first time, but can be used" 1>&2
          echo "to reinitialize settings or services as needed." 1>&2
          echo "Alternatively you can run: # $MODOFU_SCRIPT_NAME dev start --run-setup-scripts" 1>&2
          echo "" 1>&2
          echo "Options:" 1>&2
          echo "    --no-start-scripts  Skip execution of scripts in start.d during setup." 1>&2
        }
        run_setup_scripts=true
        run_start_scripts=true
        shift 2
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_setup_help
              exit 0
            ;;

            --no-start.d-scripts|--no-start-scripts)
              run_start_scripts=false
              echo "I: Not running start.d scripts, because '--no-start-scripts' was given" 1>&2
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        start_devel_env $run_setup_scripts $run_start_scripts

        devel_env_info
      ;;

      start)
        int_dev_start_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev start [options]" 1>&2
          echo ""
          echo "This command starts the development environment." 1>&2
          echo "By default, it also runs scripts located in 'start.d' unless specified otherwise." 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    --run-setup-scripts  Also execute setup scripts in 'setup.d' in advance." 1>&2
          echo "    --no-start-scripts   Do not run scripts in 'start.d'." 1>&2
        }
        run_setup_scripts=false
        run_start_scripts=true
        shift 2
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_start_help
              exit 0
            ;;

            --run-setup-scripts)
              run_setup_scripts=true
              echo "I: Also running scripts in 'setup.d', because '--run-setup-scripts' was given" 1>&2
            ;;

            --no-scripts|--no-start-scripts)
              run_start_scripts=false
              echo "I: Not running scripts in 'start.d', because '--no-start-scripts' was given" 1>&2
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        start_devel_env $run_setup_scripts $run_start_scripts

        devel_env_info
      ;;

      restart)
        int_dev_restart_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev restart [options] [SERVICES...]" 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    -t, --timeout TIMEOUT     Specify a shutdown timeout in seconds." 1>&2
          echo "                              (default: 45)" 1>&2
        }
        shift 2
        timeout_option="--timeout 45"
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_restart_help
              exit 0
            ;;

            -t|--timeout)
              timeout_option="--timeout $2"
              shift
            ;;

            -t=?*|--timeout=?*)
              timeout_option="--timeout ${1#*=}"
            ;;

            --)
              shift
              break
            ;;

            -?*)
              echo "Command 'dev' with argument 'restart' does not support option '$1'" >&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        services_requested="$@"
        services_running=""
        services_to_restart=""

        provide_basic_informations

        echo "I: Checking for running services/containers..." 1>&2
        container_ids=$($DOCKER_COMPOSER_CMD ps -q)

        for container_id in $container_ids
        do
          if [ "$(docker ps -f id=$container_id -f status=running -q --no-trunc)" = "$container_id" ]; then
            container_service_name="$(get_docker_compose_service_name_by_container_id $container_id)"
            services_running="$services_running $container_service_name"
          fi
        done

        if [ -z "$(echo $services_running)" ]; then
          echo "E: No single service running right now - can not restart anything" 1>&2
          exit 1
        fi

        if [ -z "$services_requested" ]; then
          echo "I: No specific service(s) to restart given, restarting all running services..." 1>&2
          services_to_restart=$services_running
        else
          for service_requested in $services_requested
          do
            for service_running in $services_running
            do
              if [ "$service_running" = "$service_requested" ]; then
                services_to_restart="$services_to_restart $service_requested"
                continue 2
              fi
            done
            echo "W: Services '$service_requested' is not running - not trying to restart it" 1>&2
          done
        fi

        if [ -z "$(echo $services_to_restart)" ]; then
          echo "E: None of the services requested for restart is running." 1>&2
          exit 1
        fi

        $DOCKER_COMPOSER_CMD restart $timeout_option $services_to_restart
      ;;

      exec)
        int_dev_exec_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev exec [options] SERVICE COMMAND [COMMAND ARGS...]" 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    -u|--user=USER       Run the command as this user." 1>&2
          echo "    -T|--no-tty          Disable pseudo-tty allocation. By default a TTY is allocated." 1>&2
        }
        shift 2
        run_as_user_option=""
        tty_option=""
        while :;
        do
          case $1 in

            ''|--help|-h)
              int_dev_exec_help
              exit 0
            ;;

            -u|--user)
              run_as_user_option="--user $2"
              shift
            ;;

            -u=?*|--user=?*)
              run_as_user_option="--user ${1#*=}"
            ;;

            -T|--no-tty)
              tty_option="-T"
            ;;

            --)
              shift
              break
            ;;

            -?*)
              echo "Command 'dev' with argument 'exec' does not support option '$1'" >&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        container_to_use="$1"
        shift

        if [ $# -le 0 ]; then
          int_dev_exec_help
          exit 1
        fi

        provide_basic_informations
        container_name="$1"
        $DOCKER_COMPOSER_CMD exec $run_as_user_option $tty_option $container_to_use "$@"
      ;;

      stop)
        stop_devel_env
      ;;

      clean-sync)
        echo "E: '# $MODOFU_SCRIPT_NAME dev clean-sync' has been superseeded by" 1>&2
        echo "   '# $MODOFU_SCRIPT_NAME sync clean" 1>&2
        exit 1
      ;;

      remove)
        int_dev_remove_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev remove [options] [SERVICES...]" 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    --remove-orphans  Remove containers for services that are" 1>&2
          echo "                      not (or no longer defined) for the project." 1>&2
          echo "    --keep-volumes    Neither remove named nor anonymous volumes." 1>&2
        }
        shift 2
        remove_volumes_option="-v"
        remove_orphans_option=""
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_remove_help
              exit 0
            ;;

            --remove-orphans)
              remove_orphans_option="--remove-orphans"
            ;;

            --keep-volumes)
              remove_volumes_option=""
            ;;

            --)
              shift
              break
            ;;

            -?*)
              echo "Command 'dev' with argument 'remove' does not support option '$1'" 1>&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        services_requested="$@"

        if [ -n "$services_requested" ] && \
           [ -n "$remove_orphans_option" ]; then
          echo "W: Ignoring option '--remove-orphans', since at least one services to remove was defined." 1>&2
          remove_orphans_option=""
        fi

        provide_basic_informations

        if [ -n "$services_requested" ]; then
          echo "I: Removing containers for services: $services_requested" 1>&2
          $DOCKER_COMPOSER_CMD rm --stop --force $remove_volumes_option $services_requested
        else
          stop_devel_env
          echo "I: Removing development environment..." 1>&2
          provide_domain_informations
          $DOCKER_COMPOSER_CMD down $remove_volumes_option $remove_orphans_option
          int_add_entries_to_etc_hosts $COMPOSE_PROJECT_NAME do_clean
          if [ "$OS" = "osx" ]; then
            # Remove IP alias for the project
            echo "I: Removing local project IP on the loopback device. You might need to provide your password..." 1>&2
            sudo ifconfig lo0 -alias $PROJECT_DEV_IP 255.0.0.0 || true
          fi
          clean_devel_sync
        fi
      ;;

      logs)
        int_dev_logs_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME dev logs [options] [SERVICES...]" 1>&2
          echo ""
          echo "Displays the logs for specified services within the development environment. If no service is specified, logs for all services will be displayed."
          echo "Use this command to troubleshoot issues by inspecting the runtime logs of your services."
          echo ""
          echo "Options:" 1>&2
          echo "    -f, --follow       Follow log output." 1>&2
          echo "    --since [TIME]     Show logs since a certain time (e.g., 10m for the last 10 minutes)." 1>&2
          echo "    --tail [NUMBER]    Number of lines to show from the end of the logs. Use 'all' to display all logs." 1>&2
          echo "    -t, --timestamps   Show timestamps." 1>&2
        }
        shift 2
        follow_option=""
        since_option=""
        tail_option=""
        timestamp_option=""
        while :;
        do
          case $1 in

            --help|-h)
              int_dev_logs_help
              exit 0
            ;;

            -f|--follow)
              follow_option="--follow"
            ;;

            --since)
              if [ "$HAS_COMPOSE_V2_SUPPORT" != "yes" ]; then
                echo "E: Option '--since' for '$MODOFU_SCRIPT_NAME dev logs' requires at least docker compose v2" 1>&2
                exit 1
              fi
              since_option="--since $2"
              shift
            ;;

            --tail)
              tail_option="--tail $2"
              shift
            ;;

            -t|--timestamps)
              timestamp_option="--timestamps"
            ;;

            --)
              shift
              break
            ;;

            -?)
              echo "E: Command 'dev' with argument 'logs' does not support option '$1'" 1>&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        provide_basic_informations

        $DOCKER_COMPOSER_CMD logs $follow_option $timestamp_option $since_option $tail_option "$@"
      ;;

      ''|help|--help)
        echo "Command '$1' supports the following arguments:" 1>&2
        echo "    info          Show development environment information" 1>&2
        echo "    ps            List containers" 1>&2
        echo "    pull          Pull service images" 1>&2
        echo "    build         Build or rebuild services" 1>&2
        echo "    setup         Setup the development environment" 1>&2
        echo "    start         Start services" 1>&2
        echo "    restart       Restart services" 1>&2
        echo "    exec          Execute a command in a running container" 1>&2
        echo "    stop          Stop services" 1>&2
        echo "    remove        Remove stopped containers" 1>&2
        echo "    logs          View output from services" 1>&2
        echo "    url           Open service URL in the default browser" 1>&2
            ;;

      *)
        echo "E: Command '$1' does not support argument '$2'" 1>&2
        exit 1
      ;;
    esac
  ;;

  doc)
    case "$2" in
      ''|read|edit)
        local_edit_extra_options=""
        if [ "$2" = "edit" ]; then
          local_edit_extra_options="-v $(pwd)/docs:/usr/local/share/modofu/github-pages"
        fi

        if [ "$OS" = "osx" ]; then
          # Bring up the MODOFU_LOCAL_DOCUMENTATION_IP
          echo "I: Adding modofu local documentation ip the loopback device. You might need to provide your password..." 1>&2
          sudo ifconfig lo0 alias $MODOFU_LOCAL_DOCUMENTATION_IP 255.0.0.0
        fi
        int_add_entries_to_etc_hosts modofudoc $MODOFU_LOCAL_DOCUMENTATION_IP "doc.modofu.local"
        docker run \
          --rm \
          -it \
          -e GEM_PATH=/modofu-doc-server/ruby/2.3.0 \
          $local_edit_extra_options \
          -p $MODOFU_LOCAL_DOCUMENTATION_IP:80:4000 \
          --workdir /usr/local/share/modofu/doc-server \
          modofu/modofu:stable \
          bundle exec jekyll serve --host 0.0.0.0 --source /usr/local/share/modofu/github-pages
        if [ "$OS" = "osx" ]; then
          # Bring down the MODOFU_LOCAL_DOCUMENTATION_IP
          echo "I: Removing modofu local documentation ip the loopback device. You might need to provide your password..." 1>&2
          sudo ifconfig lo0 alias $MODOFU_LOCAL_DOCUMENTATION_IP 255.0.0.0
        fi
      ;;

      --help|-h)
        echo "Command '$1' supports the following arguments:" 1>&2
        echo "    read        Open the project documentation in a browser" 1>&2
        echo "    edit        Edit the project documentation" 1>&2
      ;;

      *)
        echo "E: Command '$1' does not support argument '$2'" 1>&2
        exit 1
      ;;
    esac
  ;;

  sync)
    case "$2" in
      log)
        int_sync_log_help()
        {
          echo "Usage: # $MODOFU_SCRIPT_NAME sync log [options]" 1>&2
          echo ""
          echo "Options:" 1>&2
          echo "    -f|--follow    Specify if the logs should be streamed" 1>&2
          echo "    --lines=NUM    Specify number of lines to tail" 1>&2
        }
        shift 2
        run_as_user_option=""
        while :;
        do
          case $1 in

            --help|-h)
              int_sync_log_help
              exit 0
            ;;

            -f|--follow)
              follow_option="--follow"
            ;;

            --lines)
              lines_option="--lines=$2"
              shift
            ;;

            --lines=?*)
              run_as_user_option="--lines=${1#*=}"
            ;;

            --)
              shift
              break
            ;;

            -?*)
              echo "Command 'dev' with argument 'exec' does not support option '$1'" >&2
              exit 1
            ;;

            *)
              break;
            ;;
          esac
          shift
        done

        if [ $NEED_DOCKER_SYNC -eq 0 ]; then
          echo "I: Your project is not making use of docker-sync or it is not needed on your system." 1>&2
        else
          provide_basic_informations
          docker-sync log --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME $follow_option $lines_option
        fi
      ;;

      start)
        if [ $NEED_DOCKER_SYNC -eq 0 ]; then
          echo "I: Your project is not making use of docker-sync or it is not needed on your system." 1>&2
        else
          provide_basic_informations
          docker-sync start --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME
        fi
      ;;

      stop)
        if [ $NEED_DOCKER_SYNC -eq 0 ]; then
          echo "I: Your project is not making use of docker-sync or it is not needed on your system." 1>&2
        else
          provide_basic_informations
          docker-sync stop --dir=/tmp/modofu/docker-sync --name=docker-sync-managed-by-modofu-for-$COMPOSE_PROJECT_NAME
        fi
      ;;

      clean)
        clean_devel_sync
      ;;

      ''|--help|-h)
        echo "Command '$1' supports the following arguments:" 1>&2
        echo "    log         Show sync logs" 1>&2
        echo "    start       Start syncing services" 1>&2
        echo "    stop        Stop syncing services" 1>&2
        echo "    clean       Clean sync artifacts" 1>&2
      ;;

      *)
        echo "E: Command '$1' does not support argument '$2'" 1>&2
        exit 1
      ;;
    esac
  ;;

  self-upgrade)
    self_upgrade
  ;;

  auto-install-3rd-party-tools)
    echo "Command '$1' is deprecated and has no longer any effect," 1>&2
    exit 1
  ;;

  license)
    docker run --rm $MODOFU_DOCKER_IMAGE cat /usr/local/share/modofu/GPL-2
    echo "
####################################
# Copyright (c) 2016 - 2017 YMC AG #
###########################################################################
# This program is free software; you can redistribute it and/or modify it #
# under the terms of the GNU General Public License as published by the   #
# Free Software Foundation; either version 2 of the License, or (at your  #
# option) any later version.                                              #
# The text of the GNU General Public License version 2 is found above.    #
###########################################################################
    "
  ;;

  internal-uninstall-helper)
    int_add_entries_to_etc_hosts full_clean

    echo "I: Ensuring docker network 'modofu-local-docker-host' does not exists..." 1>&2
    docker network rm modofu-local-docker-host 2>/dev/null 1>/dev/null || true

    if [ "$OS" = "osx" ]; then
      echo "I: Removing the generic local test ip on the loopback device. You might need to provide your password..." 1>&2
      sudo ifconfig lo0 delete $GENERIC_LOCAL_TEST_IP 255.0.0.0

      echo "I: Removing the local ip on the loopback device, where the docker host was reachable from the docker containers..." 1>&2
      sudo ifconfig lo0 delete $LOCAL_DOCKER_HOST_IP 255.0.0.0
    fi
  ;;

  ''|help|--help)
    echo "Usage: # $MODOFU_SCRIPT_NAME COMMAND [argument...]" 1>&2
    echo "Commands:" 1>&2
    echo "    help            Display help information" 1>&2
    echo "    dev             Manage Development environment" 1>&2
    echo "    sync            Manage Docker Sync" 1>&2
    echo "    self-upgrade    Upgrade the modofu script to the latest version" 1>&2
    echo "    doc             Open project documentation" 1>&2
    echo "    license         Display licensing information" 1>&2
    ;;

  *)
    echo "E: $MODOFU_SCRIPT_NAME does not support command '$1'" 1>&2
    echo "I: For a list of valid commands use:" 1>&2
    echo "   # $MODOFU_SCRIPT_NAME help" 1>&2
    exit 1
  ;;
esac

exit 0
